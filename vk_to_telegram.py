import subprocess
import os
import vk_api
import asyncio
import traceback
import time

from telegram import Bot, InputMediaPhoto, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

from dotenv import load_dotenv
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
VK_TOKEN = os.getenv("VK_TOKEN")
TG_BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
TG_CHAT_ID = os.getenv("TG_CHAT_ID")
ERROR_RECIPIENT_ID = int(os.getenv("ERROR_RECIPIENT_ID"))
VK_GROUP_ID = int(os.getenv("VK_GROUP_ID"))
VIDEO_DIR = "temp_videos"

# === –°–æ—Å—Ç–æ—è–Ω–∏–µ ===
sent_post_ids = set()
sent_pinned_ids = set()  # <- –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö
is_paused = False
last_post_id = None
start_time = time.time()

# === VK –∏ Bot ===
bot = Bot(token=TG_BOT_TOKEN)
vk_session = vk_api.VkApi(token=VK_TOKEN)
vk = vk_session.get_api()
os.makedirs(VIDEO_DIR, exist_ok=True)

# === –ê–ø—Ç–∞–π–º ===
def get_uptime():
    seconds = int(time.time() - start_time)
    mins, secs = divmod(seconds, 60)
    hours, mins = divmod(mins, 60)
    return f"{hours}—á {mins}–º {secs}—Å"

# === –ö–æ–º–∞–Ω–¥—ã ===
async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ERROR_RECIPIENT_ID:
        await update.message.reply_text("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        subprocess.run(["systemctl", "restart", "vkbot"])
    else:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = "‚è∏Ô∏è –ü–∞—É–∑–∞" if is_paused else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    await update.message.reply_text(
        f"–°—Ç–∞—Ç—É—Å: {status}\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç ID: {last_post_id}\n–ê–ø—Ç–∞–π–º: {get_uptime()}"
    )

async def pause_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_paused
    if update.effective_user.id == ERROR_RECIPIENT_ID:
        is_paused = True
        await update.message.reply_text("‚è∏Ô∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def resume_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_paused
    if update.effective_user.id == ERROR_RECIPIENT_ID:
        is_paused = False
        await update.message.reply_text("‚ñ∂Ô∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

async def lastpost_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if last_post_id:
        await update.message.reply_text(f"üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç: {last_post_id}")
    else:
        await update.message.reply_text("‚ùî –ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å.")

# === VK-–ø–æ—Å—Ç—ã ===
def fetch_recent_vk_posts(count: int = 5):
    """–ë–µ—Ä—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤, —á—Ç–æ–±—ã:
    - –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º;
    - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –ø–∞—á–∫–æ–π.
    """
    try:
        response = vk.wall.get(owner_id=VK_GROUP_ID, count=count)
        items = response.get("items", [])
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ), —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É
        items.sort(key=lambda p: p.get("date", 0))
        return items
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
        return []

def is_live_video_attachment(att: dict) -> bool:
    """True –µ—Å–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ ‚Äî live-–≤–∏–¥–µ–æ VK (—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è)."""
    if att.get("type") != "video":
        return False
    video = att.get("video", {})
    # –£ VK –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –ø–æ–ª—è: live (1), live_status ('started'/'finished'/'upcoming')
    if video.get("live") == 1:
        return True
    ls = str(video.get("live_status", "")).lower()
    if ls in {"started", "upcoming"}:
        return True
    return False

def post_is_live_stream(post: dict) -> bool:
    """–ü–æ—Å—Ç —Ü–µ–ª–∏–∫–æ–º ‚Äî —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è (–ª–∏–±–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ live-–≤–∏–¥–µ–æ)."""
    atts = post.get("attachments", [])
    if not atts:
        return False
    any_live = any(is_live_video_attachment(a) for a in atts)
    # –ï—Å–ª–∏ –≤—Å–µ –≤–∏–¥–µ–æ –≤ –ø–æ—Å—Ç–µ ‚Äî live (–∏ –¥—Ä—É–≥–∏—Ö –º–µ–¥–∏–∞ –Ω–µ—Ç) ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ—Å—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–µ–π
    if any_live and all(a.get("type") == "video" for a in atts):
        return True
    return False

def extract_media_from_post(post):
    """–î–æ—Å—Ç–∞—ë–º —Ñ–æ—Ç–æ –∏ –Ωe-live –≤–∏–¥–µ–æ (–æ–±—ã—á–Ω—ã–µ). Live-–≤–∏–¥–µ–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º."""
    photos = []
    videos = []
    attachments = post.get('attachments', []) or []

    for att in attachments:
        t = att.get('type')
        if t == 'photo':
            sizes = att['photo'].get('sizes', [])
            if sizes:
                largest = max(sizes, key=lambda x: x['width'] * x['height'])
                photos.append(largest['url'])
        elif t == 'video':
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º live
            if is_live_video_attachment(att):
                continue
            vd = att.get('video', {})
            owner_id = vd.get('owner_id')
            video_id = vd.get('id')
            access_key = vd.get('access_key')
            if owner_id and video_id:
                link = f"https://vk.com/video{owner_id}_{video_id}"
                if access_key:
                    link += f"?access_key={access_key}"
                videos.append(link)
    return photos, videos

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ERROR_RECIPIENT_ID:
        await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        subprocess.run(["systemctl", "stop", "vkbot"])
    else:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")

async def send_to_telegram(text, photos, videos):
    try:
        sent_anything = False

        if photos:
            sent_anything = True
            if len(text) <= 1024:
                media = [InputMediaPhoto(media=photos[0], caption=text)] + [
                    InputMediaPhoto(media=url) for url in photos[1:]
                ]
            else:
                media = [InputMediaPhoto(media=url) for url in photos]
            await bot.send_media_group(chat_id=TG_CHAT_ID, media=media)
            if len(text) > 1024:
                await bot.send_message(chat_id=TG_CHAT_ID, text=text[:4096])

        if videos:
            sent_anything = True
            for i, video_url in enumerate(videos):
                filename = os.path.join(VIDEO_DIR, f"video_{i}.mp4")
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä (49–ú–ë) ‚Äî –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Å—ã–ª–∫–æ–π
                subprocess.run(
                    ["yt-dlp", "--max-filesize", "49M", "-f", "mp4", "-o", filename, video_url],
                    stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT
                )
                if os.path.exists(filename):
                    with open(filename, 'rb') as f:
                        await bot.send_video(chat_id=TG_CHAT_ID, video=f, caption=text[:1024])
                    os.remove(filename)
                else:
                    await bot.send_message(chat_id=TG_CHAT_ID, text=f"üé• {video_url}")

        if not sent_anything:
            # –ù–∏ —Ñ–æ—Ç–æ, –Ω–∏ –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(chat_id=TG_CHAT_ID, text=text[:4096])

    except Exception as e:
        error_text = f"‚ùó –û—à–∏–±–∫–∞ Telegram:\n{e}"
        print(error_text)
        try:
            await bot.send_message(chat_id=ERROR_RECIPIENT_ID, text=error_text)
        except Exception as inner_err:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏: {inner_err}")

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
async def main_loop():
    global last_post_id
    try:
        await bot.send_message(chat_id=ERROR_RECIPIENT_ID, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")

    while True:
        try:
            if is_paused:
                await asyncio.sleep(10)
                continue

            posts = fetch_recent_vk_posts(count=5)
            if not posts:
                await asyncio.sleep(30)
                continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
            for post in posts:
                pid = post.get('id')

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
                if post_is_live_stream(post):
                    # –õ—ë–≥–∫–∏–π –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
                    print(f"SKIP live stream post id={pid}")
                    continue

                # –ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π –ø–æ—Å—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                is_pinned = post.get('is_pinned') == 1
                if is_pinned:
                    if pid in sent_pinned_ids:
                        continue
                else:
                    if pid in sent_post_ids:
                        continue

                text = (post.get('text') or "").strip() or "üìù –ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
                photos, videos = extract_media_from_post(post)

                # –ï—Å–ª–∏ –≤ –ø–æ—Å—Ç–µ –±—ã–ª–∏ —Ç–æ–ª—å–∫–æ live-–≤–∏–¥–µ–æ, media –ø—É—Å—Ç—ã–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.
                await send_to_telegram(text, photos, videos)

                if is_pinned:
                    sent_pinned_ids.add(pid)
                else:
                    sent_post_ids.add(pid)
                    last_post_id = pid

            await asyncio.sleep(60)

        except Exception as loop_err:
            # –õ–æ–≥ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ —É–ª–µ—Ç–∞—Ç—å –≤ —Ä–µ—Å—Ç–∞—Ä—Ç-—à—Ç–æ—Ä–º
            tb = "".join(traceback.format_exception(type(loop_err), loop_err, loop_err.__traceback__))
            msg = f"‚ùó –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞:\n{loop_err}\n\n{tb[-1500:]}"
            print(msg)
            try:
                await bot.send_message(chat_id=ERROR_RECIPIENT_ID, text=msg[:4096])
            except:
                pass
            await asyncio.sleep(10)

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = ApplicationBuilder().token(TG_BOT_TOKEN).build()

    app.add_handler(CommandHandler("restart", restart_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("pause", pause_command))
    app.add_handler(CommandHandler("resume", resume_command))
    app.add_handler(CommandHandler("lastpost", lastpost_command))
    app.add_handler(CommandHandler("stop", stop_command))

    async def after_start(app):
        asyncio.create_task(main_loop())

    app.post_init = after_start
    app.run_polling()

if __name__ == "__main__":
    main()
